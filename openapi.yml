openapi: "3.0.3"

info:
  title: Public transport
  version: "1.0.0"
  description: |
    An API for the public transport CRUD app.\
    \
    Authentication process is built using JSON Web Tokens.\
    Token can be passed in `Authorization` header
    (with `Bearer` prefix separated by the whitespace) or in `token` query parameter.\
    \
    When the token expires, the refreshed token is automatically set
    to the response headers (`token`, `token_type`, `expires_in`)
    for the request made with the expired token. The client must check for
    the presence of these response headers and react to their appearance.\
    \
    All responses are wrapped in the envelop:
      - `statusCode` - an integer that represents HTTP response status code;
      - `errors` - an array of strings values that represent error messages;
      - `data` - a nullable value of specified schema type.
  contact:
    email: r.m.khasanshin@gmail.com

tags:
  - name: Public transport
  - name: User
  - name: Organization name

paths:
  /public_transport:
    get:
      security:
        - bearerAuth: []
      tags:
        - Public transport
      summary: Get all public transport.
      parameters:
        - in: query
          name: page
          description: Page number.
          schema:
            type: integer
            minimum: 1
            default: 1
        - in: query
          name: rows
          description: Rows count.
          schema:
            type: integer
            minimum: 1
            default: 25
        - in: query
          name: sort_by
          description: Column to sort by.
          schema:
            type: string
            default: id
            enum:
              - id
              - type
              - route_number
              - capacity
              - organization_name
              - created_at
              - updated_at
        - in: query
          name: order
          description: Sorting order.
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
        - in: query
          name: type[]
          description: |
            Type to filter by.\
            Can be repeated to filter by several types.
          schema:
            type: string
            example: trolleybus
        - in: query
          name: organization_name[]
          description: |
            Organization name to filter by.\
            Can be repeated to filter by several organization names.
          schema:
            type: string
            example: "Company #1"
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  _meta:
                    $ref: "#/components/schemas/MetaObject"
                  paginated_data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PublicTransport"
        "401":
          description: Unable to authenticate user by token (token is invalid, absent, has expired, etc).
        "500":
          description: Unknown error
    post:
      security:
        - bearerAuth: []
      tags:
        - Public transport
      summary: Add public transport.
      requestBody:
        description: Add public transport request body.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddPublicTransportRequest"
      responses:
        "201":
          description: Success.
          headers:
            Location:
              description: Added public transport URL (relative to API URL).
              schema:
                type: string
                example: /public_transport/12
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicTransport"
        "400":
          description: Invalid request body.
        "401":
          description: Unable to authenticate user by token (token is invalid, absent, has expired, etc).
        "500":
          description: Unknown error.
  /public_transport/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Public transport
      summary: Get public transport by ID.
      parameters:
        - in: path
          name: id
          description: Public transport ID.
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicTransport"
        "401":
          description: Unable to authenticate user by token (token is invalid, absent, has expired, etc).
        "404":
          description: Public transport is not found.
        "500":
          description: Unknown error.
    put:
      security:
        - bearerAuth: []
      tags:
        - Public transport
      summary: Update public transport by ID.
      parameters:
        - in: path
          name: id
          description: Public transport ID.
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        description: Update public transport request body.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePublicTransportRequest"
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicTransport"
        "400":
          description: Invalid request body.
        "401":
          description: Unable to authenticate user by token (token is invalid, absent, has expired, etc).
        "404":
          description: Public transport is not found.
        "500":
          description: Unknown error.
    delete:
      security:
        - bearerAuth: []
      tags:
        - Public transport
      summary: Delete public transport by ID.
      parameters:
        - in: path
          name: id
          description: Public transport ID.
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        "204":
          description: Success.
        "401":
          description: Unable to authenticate user by token (token is invalid, absent, has expired, etc).
        "404":
          description: Public transport is not found.
        "500":
          description: Unknown error.
  /sign_in:
    post:
      tags:
        - User
      summary: Sign in.
      requestBody:
        description: Sign in request body.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignInRequest"
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignInResponse'
        "400":
          description: Invalid credentials.
        "500":
          description: Unknown error.
  /sign_up:
    post:
      tags:
        - User
      summary: Sign up.
      requestBody:
        description: Sign up request body.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignUpRequest"
      responses:
        "201":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignUpResponse"
        "400":
          description: Invalid request body.
        "500":
          description: Unknown error.
  /whoami:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Whoami.
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unable to authenticate user by token (token is invalid, absent, has expired, etc).
        "500":
          description: Unknown error.
  /organization_name:
    get:
      security:
        - bearerAuth: []
      tags:
        - Organization name
      summary: Get all organization names.
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "Company #1"
        "401":
          description: Unable to authenticate user by token (token is invalid, absent, has expired, etc).
        "500":
          description: Unknown error.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    PublicTransport:
      type: object
      description: |
        Public transport model.\
        The `type-route_number` pair must be unique.
      required:
        - id
        - type
        - route_number
        - capacity
        - organization_name
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 12
        type:
          type: string
          enum:
            - bus
            - route_taxi
            - tram
            - trolleybus
        route_number:
          type: string
          minLength: 1
          example: 32г
        capacity:
          type: integer
          minimum: 1
          example: 50
        organization_name:
          type: string
          minLength: 1
          example: Пассажирское предприятие №8
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AddPublicTransportRequest:
      type: object
      description: |
        Add public transport request.\
        The `type-route_number` pair must be unique.
      required:
        - type
        - route_number
        - capacity
        - organization_name
      properties:
        type:
          type: string
          enum:
            - bus
            - route_taxi
            - tram
            - trolleybus
        route_number:
          type: string
          minLength: 1
          example: 32г
        capacity:
          type: integer
          minimum: 1
          example: 50
        organization_name:
          type: string
          minLength: 1
          example: Пассажирское предприятие №8
    UpdatePublicTransportRequest:
      type: object
      description: |
        Update public transport request.\
        The `type-route_number` pair must be unique.
      properties:
        type:
          type: string
          enum:
            - bus
            - route_taxi
            - tram
            - trolleybus
        route_number:
          type: string
          minLength: 1
          example: 32г
        capacity:
          type: integer
          minimum: 1
          example: 50
        organization_name:
          type: string
          minLength: 1
          example: Пассажирское предприятие №8
    SignInRequest:
      type: object
      description: Sign in request.
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          example: zxcqwe123
    SignUpRequest:
      type: object
      description: |
        Sign up request.\
        'password' and 'password_confirmation' values must be the same.
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          minLength: 1
          example: John
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          example: zxcqwe123
        password_confirmation:
          type: string
          minLength: 6
          example: zxcqwe123
    SignInResponse:
      type: object
      description: Sign in response.
      required:
        - user
        - token
      properties:
        user:
          $ref: '#/components/schemas/User'
        auth_data:
          $ref: '#/components/schemas/AuthDataObject'
    SignUpResponse:
      type: object
      description: Sign up response.
      required:
        - user
        - token
      properties:
        user:
          $ref: '#/components/schemas/User'
        auth_data:
          $ref: '#/components/schemas/AuthDataObject'
    User:
      type: object
      description: User model.
      required:
        - name
        - email
      properties:
        name:
          type: string
          minLength: 1
          example: John
        email:
          type: string
          format: email
    AuthDataObject:
      type: object
      description: Auth data object.
      required:
        - token
        - token_type
        - expires_in
      properties:
        token:
          type: string
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9sb2NhbGhvc3Q6OTkyMFwvYXBpXC9zaWduX2luIiwiaWF0IjoxNjAwNzc3MzE2LCJleHAiOjE2MDA3ODA5MTYsIm5iZiI6MTYwMDc3NzMxNiwianRpIjoiVG1Va2R0eUhUZU9yRUhNWCIsInN1YiI6MywicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.cp8WuCb3qCm7aKCTn4yznOxzjzI1fGKAKmOjfe02_bU
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 3600
    MetaObject:
      type: object
      description: An object which contains pagination-related meta-information.
      required:
        - total
        - total_pages
        - rows
      properties:
        total:
          type: integer
          minimum: 0
          example: 100
        total_pages:
          type: integer
          minimum: 0
          example: 100
        page:
          type: integer
          minimum: 1
          example: 13
        rows:
          type: integer
          minimum: 1
          example: 1
        next:
          type: string
          example: "/public_transport?page=14&rows=1&sort_by=id&order=asc&type[]=bus"
        prev:
          type: string
          example: "/public_transport?page=12&rows=1&sort_by=id&order=asc&type[]=bus"
        first:
          type: string
          example: "/public_transport?page=1&rows=1&sort_by=id&order=asc&type[]=bus"
        last:
          type: string
          example: "/public_transport?page=100&rows=1&sort_by=id&order=asc&type[]=bus"
